# Production PostgreSQL configuration - use Railway PostgreSQL environment variables
# Our custom DataSourceConfig class will handle the Railway DATABASE_URL format (postgresql://)
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/portfolio_db}
spring.datasource.username=${PGUSER:portfolio_user}
spring.datasource.password=${PGPASSWORD:portfolio@123}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection pool settings - Railway optimized
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.auto-commit=true

# SSL Configuration for Railway PostgreSQL
spring.datasource.hikari.data-source-properties.sslmode=require
spring.datasource.hikari.data-source-properties.sslrootcert=disable

# Minimal JPA Configuration - let Spring Boot auto-configure everything
# No explicit Hibernate properties to avoid conflicts
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.open-in-view=false

# Database platform will be auto-detected by Hibernate

# Liquibase Configuration
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml

# Server Configuration
server.port=${PORT:8080}

# Actuator Configuration for Railway health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# Enable debug logging to see startup issues
logging.level.root=INFO
logging.level.com.portfolio.tracker=DEBUG
logging.level.org.springframework.boot=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=DEBUG
logging.level.liquibase=INFO

# CORS Configuration for production with the frontend URL
spring.web.cors.allowed-origins=${FRONTEND_URL:https://firefolio.up.railway.app}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Google OAuth2 Configuration for production
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:dummy}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:dummy}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${FRONTEND_URL:https://firefolio.up.railway.app}/login/oauth2/code/google

# Additional timeout settings to prevent hangs
spring.jpa.properties.hibernate.connection.acquisition_timeout=10000
spring.datasource.hikari.initialization-fail-timeout=30000
