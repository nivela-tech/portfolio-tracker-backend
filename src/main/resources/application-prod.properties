# Production PostgreSQL configuration - use Railway PostgreSQL environment variables
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/portfolio_db}
spring.datasource.username=${PGUSER:portfolio_user}
spring.datasource.password=${PGPASSWORD:portfolio@123}
spring.datasource.driver-class-name=org.postgresql.Driver

# Additional PostgreSQL properties from Railway
spring.datasource.hikari.data-source-properties.socketFactory=org.postgresql.jdbc.PgSQLSocketFactory
spring.datasource.hikari.data-source-properties.sslmode=require

# JPA Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Liquibase Configuration - using the same DATABASE_URL variable
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml
# Use the exact same database connection as the application
spring.liquibase.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/portfolio_db}
spring.liquibase.user=${PGUSER:portfolio_user}
spring.liquibase.password=${PGPASSWORD:portfolio@123}

# Connection pool settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000

# Server Configuration
server.port=${PORT:8080}

# Actuator Configuration for Railway health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# CORS Configuration for production - you'll need to update this with your frontend URL
spring.web.cors.allowed-origins=${FRONTEND_URL:http://localhost:3000}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
