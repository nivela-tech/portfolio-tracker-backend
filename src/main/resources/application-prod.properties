# Production PostgreSQL configuration - use Railway PostgreSQL environment variables
# Our custom DataSourceConfig class will handle the Railway DATABASE_URL format (postgresql://)
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/portfolio_db}
spring.datasource.username=${PGUSER:portfolio_user}
spring.datasource.password=${PGPASSWORD:portfolio@123}
spring.datasource.driver-class-name=org.postgresql.Driver

# Additional PostgreSQL connection properties
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.maximum-pool-size=5

# Additional PostgreSQL properties from Railway
spring.datasource.hikari.data-source-properties.socketFactory=org.postgresql.jdbc.PgSQLSocketFactory
spring.datasource.hikari.data-source-properties.sslmode=require

# JPA Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Liquibase Configuration
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml
# Don't explicitly set URL/username/password - let Spring Boot derive them from the datasource

# Connection pool settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000

# Server Configuration
server.port=${PORT:8080}

# Actuator Configuration for Railway health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# CORS Configuration for production with the frontend URL
spring.web.cors.allowed-origins=${FRONTEND_URL:https://firefolio.up.railway.app}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Google OAuth2 Configuration for production
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${spring.web.cors.allowed-origins}/login/oauth2/code/google
